@startuml Real-Time-Monitoring-WebApp-Domain-Classes

' ========================
' Stereotypes colors
' ========================
skinparam class {
    BackgroundColor<<Entity>> LightYellow
    BackgroundColor<<ValueObject>> LightGreen
    BackgroundColor<<Enum>> Wheat
}

' ========================
' Entities (from backend)
' ========================
class MonitoringSession <<Entity>> {
  - id: number
  - tripId: number
  - deviceId: number
  - startTime: Date
  - endTime: Date | null
  - createdAt: Date
  - sessionStatusId: number
  - sessionStatus: MonitoringSessionStatus
  - telemetryReadings: TelemetryData[]
  --
  + isActive(): boolean
  + getDuration(): number
  + getFormattedStatus(): string
}

class TelemetryData <<Entity>> {
  - id: number
  - monitoringSessionId: number
  - temperature: number
  - humidity: number
  - vibration: number
  - latitude: number
  - longitude: number
  - createdAt: Date
  --
  + getTemperature(): number
  + getHumidity(): number
  + getVibration(): number
  + getLocation(): Location
}

class MonitoringSessionStatus <<Entity>> {
  - id: number
  - name: string
  --
  + isFinal(): boolean
  + isActive(): boolean
  + getDisplayName(): string
}

' ========================
' Value Objects (from backend + UI representation)
' ========================
class Location <<ValueObject>> {
  - latitude: number
  - longitude: number
  --
  + distanceTo(other: Location): number
  + isValid(): boolean
  + toLatLng(): [number, number]
}

class SensorReading <<ValueObject>> {
  - temperature: number
  - humidity: number
  - vibration: number
  --
  + isValid(): boolean
  + toArray(): number[]
}

class ChartDataPoint <<ValueObject>> {
  - timestamp: Date
  - value: number
  - label: string
  --
  + formatForChart(): object
}

class MapMarker <<ValueObject>> {
  - position: Location
  - sessionId: number
  - timestamp: Date
  - sensorData: SensorReading
  --
  + getPopupContent(): string
  + getMarkerIcon(): string
}

class SessionTimeRange <<ValueObject>> {
  - startTime: Date
  - endTime: Date | null
  --
  + isOngoing(): boolean
  + getDuration(): number
  + getFormattedDuration(): string
}

' ========================
' Enums
' ========================
enum SessionStatus <<Enum>> {
  ACTIVE
  INACTIVE
  COMPLETED
  PAUSED
}

enum SensorType <<Enum>> {
  TEMPERATURE
  HUMIDITY
  VIBRATION
}

' ========================
' Relationships
' ========================

' MonitoringSession relationships
MonitoringSession *-- "1" MonitoringSessionStatus : has
MonitoringSession *-- "0..*" TelemetryData : contains
MonitoringSession *-- "1" SessionTimeRange : has

' MonitoringSessionStatus relationships
MonitoringSessionStatus --> SessionStatus : type

' TelemetryData relationships
TelemetryData --> "1" Location : has
TelemetryData --> "1" SensorReading : creates from

' SensorReading relationships
SensorReading ..> ChartDataPoint : generates
SensorReading --> SensorType : categorized by

' Location relationships
Location ..> MapMarker : used in

' MapMarker relationships
MapMarker *-- Location : contains
MapMarker --> SensorReading : displays

@enduml
